syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";
option java_package = "io.chirpstack.api.as.external.api";
option java_multiple_files = true;
option java_outer_classname = "UserProto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


// UserService is the service managing the user access.
service UserService {
	// Get user list.
	rpc List(ListUserRequest) returns (ListUserResponse) {
		option(google.api.http) = {
			get: "/api/users"
		};
	}

	// Get data for a particular user.
	rpc Get(GetUserRequest) returns (GetUserResponse) {
		option(google.api.http) = {
			get: "/api/users/{id}"
		};
	}

	// Create a new user.
	rpc Create(CreateUserRequest) returns (CreateUserResponse) {
		option(google.api.http) = {
			post: "/api/users"
			body: "*"
		};
	}

	// Update an existing user.
	rpc Update(UpdateUserRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user.id}"
			body: "*"
		};
	}

	// Delete a user.
	rpc Delete(DeleteUserRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			delete: "/api/users/{id}"
		};
	}

	// UpdatePassword updates a password.
	rpc UpdatePassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user_id}/password"
			body: "*"
		};
	}

	// SetOrganization .
	rpc SetOrganization(SetUserOrganizationRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user_id}/setup"
			body: "*"
		};
	}
	// Auditing set Auditing.
	rpc Auditing(UserAuditingRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user_id}/auditing"
			body: "*"
		};
	}
	// SetStatus.
	rpc SetStatus(SetUserStatusRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user_id}/status"
			body: "*"
		};
	}
}

message User {
	// User ID.
	// Will be set automatically on create.
	int64 id = 1;

	// The session timeout, in minutes.
	int32 session_ttl 	= 3 ;

	// Set to true to make the user a global administrator.
	bool is_admin = 4;

	// Set to false to disable the user.
	bool is_active = 5;

	// E-mail of the user.
	string email = 6;

	// Optional note to store with the user.
	string note = 7;

	string username   	= 8;
	bool is_auditing 		= 9;// 是否审核
	string realname   	= 10;//真实姓名
	string company_name = 11;
	string roles     		= 12;
	int64 organization_id = 13;
	string phone     		= 14;
	//帐户类型1、企业帐户2、个人帐户
	int32  province_id  = 15;
	int32 	city_id     = 16;
	int32 	area_id     = 17;
	string 	address     = 18;
	double 	latitude    = 19;//纬度
	double 	longitude   = 20;//经度
	int32    type				= 21;//合作类型：1、居民2、商铺3、厂区
  int32 	status			= 22;//状态：0、未启用1、已启用2、已停用
	string  author			= 23;
	string 	remark			= 24;
	// Created at timestamp.
	google.protobuf.Timestamp created_at = 25;

	// Last update timestamp.
	google.protobuf.Timestamp updated_at = 26;
	string  roleName			= 27;
	string 	organizationName			= 28;
}

message UserOrganization {
	// Organization ID.
	int64 organization_id = 1 [json_name = "organizationID"];

	// User is admin within the context of the organization.
    // There is no need to set the is_device_admin and is_gateway_admin flags.
	bool is_admin = 2;

    // User is able to modify device related resources (applications,
    // device-profiles, devices, multicast-groups).
    bool is_device_admin = 3;

    // User is able to modify gateways.
    bool is_gateway_admin = 4;
}

message CreateUserRequest {
	// User object to create.
	User user = 1;

//	// Password of the user.
	string password = 2;

	// Add the user to the following organizations.
	repeated UserOrganization organizations = 3;
}

message CreateUserResponse {
	// User ID.
	int64 id = 1;
}

message GetUserRequest {
	// User ID.
	int64 id = 1;
}

message GetUserResponse {
	// User object.
	User user = 1;

	// Created at timestamp.
	google.protobuf.Timestamp created_at = 2;

	// Last update timestamp.
	google.protobuf.Timestamp updated_at = 3;
}

message UpdateUserRequest {
	// User object to update.
	User user = 1;
}

message DeleteUserRequest {
	// User ID.
	int64 id = 1;
}

message ListUserRequest {
	// 每页条数
	int64 limit = 1;

	// 页码
	int64 offset = 2;
}

message ListUserResponse {
	// Total number of users.
	int64 totalCount = 1;

	// Result-set.
	repeated User result = 2;
}

message UpdateUserPasswordRequest {
	// User ID.
	int64 user_id = 1;

	// New password.
	string password = 2;
}
message SetUserOrganizationRequest {
	int64 user_id = 1;
	string roles = 2;//人员角色：1,2,3,4,5
	int64 organizationId = 3;//	归属组织
}
message UserAuditingRequest {
	int64 user_id = 1;
	bool isAuditing = 2;//是否审核0否
}
message SetUserStatusRequest {
	int64 user_id = 1;
	int64 status = 2;//是否启用：0、未启用	1、已启用2、已停用
}
