syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";
option java_package = "io.chirpstack.api.as.external.api";
option java_multiple_files = true;
option java_outer_classname = "WorkOrderProto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


// WorkOrderService is the service managing work-order.
service WorkOrderService {
    // Create creates work-order.
    rpc Create(CreateWorkOrderRequest) returns (CreateWorkOrderResponse) {
        option(google.api.http) = {
            post: "/api/work-order"
            body: "*"
        };
    }

    // Get returns the work-order matching the given id.
    rpc Get(GetWorkOrderRequest) returns (GetWorkOrderResponse) {
        option(google.api.http) = {
            get: "/api/work-order/{id}"
        };
    }

    // Update updates the given work-order.
    rpc Update(UpdateWorkOrderRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            put: "/api/work-order/{work_order.id}"
            body: "*"
        };
    }

    // Delete deletes the work-order matching the given id.
    rpc Delete(DeleteWorkOrderRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            delete: "/api/work-order/{id}"
        };
    };

    // List lists the available work-order.
    rpc List(ListWorkOrderRequest) returns (ListWorkOrderResponse) {
        option(google.api.http) = {
            get: "/api/work-order"
        };
    }
    // SetPersonWorkOrderRequest updates the Person
    rpc SetPerson(SetPersonWorkOrderRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            put: "/api/work-order/{id}/personal"
            body: "*"
        };
    }

    // SetStatus updates the status
    rpc SetStatus(SetStatusWorkOrderRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            put: "/api/work-order/{id}/status"
            body: "*"
        };
    }

    // StatusCount 获取历史工单状态统计
    rpc StatusCount(StatusCountWorkOrderRequest) returns (StatusCountWorkOrderResponse) {
        option(google.api.http) = {
            get: "/api/work-order/0/status_count"
        };
    }

    // WeekStatusList 七日内工单状态统计
    rpc WeekStatusList(WeekStatusListWorkOrderRequest) returns (WeekStatusListWorkOrderResponse) {
        option(google.api.http) = {
            get: "/api/work-order/0/week_status_count_list"
        };
    }
}

message WorkOrder {
    // WorkOrder ID.
    // Will be set automatically on create.
    int64 id = 1;
    string author = 2;
    // Optional remark to store with the work-order.
    string remark = 3;
    int32 work_type = 4;
    int32 status = 5;
    string title = 6;
    string description = 7;
    string service_personal = 8;

    int32 work_level = 9;
    bool is_auditing = 10;
    string planning_time = 11;
    string warning_ids = 12;//告警转工单id集合
}

message WorkOrderListItem {
    // User ID.
    // Will be set automatically on create.
    int64 id = 1;
    string author = 2;
    // remark of the work-order.
    string remark = 3;
    int32 work_type = 4;
    int32 status = 5;
    string title = 6;
    string description = 7;
    string service_personal = 8;

    // Created at timestamp.
    google.protobuf.Timestamp created_at = 9;

    // Last update timestamp.
    google.protobuf.Timestamp updated_at = 10;

    int32 work_level = 11;
    bool is_auditing = 12;
    string planning_time = 13;
    string warning_ids = 14;//告警转工单id集合
}

message CreateWorkOrderRequest {
    // WorkOrder object to create.
    WorkOrder work_order = 1;
}

message CreateWorkOrderResponse {
    // WorkOrder ID.
    int64 id = 1;
}

message GetWorkOrderRequest {
    // WorkOrder ID.
    int64 id = 1;
}

message GetWorkOrderResponse {
    // WorkOrder object.
    WorkOrder work_order = 1;

    // Created at timestamp.
    google.protobuf.Timestamp created_at = 2;

    // Last update timestamp.
    google.protobuf.Timestamp updated_at = 3;
}

message UpdateWorkOrderRequest {
    // WorkOrder object to update.
    WorkOrder work_order = 1;
}

message DeleteWorkOrderRequest {
    // WorkOrder ID.
    int64 id = 1;
}

message ListWorkOrderRequest {
    // Max number of items to return.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    string author = 3;
    int32 status = 4;
    int32 work_type = 5;
    string search = 6;//title和描述、Remark类似
    string service_personal = 7;

    int32 work_level = 8;
    bool is_auditing = 9;

    string startTime = 10;
    string endTime = 11;
}

message ListWorkOrderResponse {
    // Total number of work-order.
    int64 total_count = 1;

    // WorkOrder within the result-set.
    repeated WorkOrderListItem result = 2;
}
message SetPersonWorkOrderRequest {
    // Total number of work-order.
    int64 id = 1;
    string service_personal = 2;
}

message SetStatusWorkOrderRequest {
    // Total number of work-order.
    int64 id = 1;
    int32 status = 2;
}

message DealInfo{
    int32 toDealCount = 1;
    int32 dealingCount = 2;
    int32 dealedCount = 3;
}

message StatusCountWorkOrderRequest {
    int64 work_type = 1;//工单类型。0：不参与筛选
    int32 work_level = 2;//紧急程度。0：不参与筛选
    string service_personal =3;//服务人员
}

message StatusCountWorkOrderResponse {
    DealInfo dealInfo =1;
}

message WeekStatusListWorkOrderRequest {
    //返回从该时间之前一天再往回追溯七日内的数据
    int32 work_type = 1;//工单类型。0：不参与筛选
    int32 work_level = 2;//紧急程度。0：不参与筛选
    string service_personal =3;//服务人员
    int32 year = 4;
    int32 month = 5;
    int32 day = 6;
}
message WeekStatusListWorkOrderResponse {
    // Total number of work-order.
    int64 total_count = 1;
    repeated DealInfo result = 2;
}