syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";
option java_package = "io.chirpstack.api.as.external.api";
option java_multiple_files = true;
option java_outer_classname = "DeviceProto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common/common.proto";
import "as/external/api/frameLog.proto";
import "gw/gw.proto";
import "ns/ns.proto";


// DeviceService is the service managing the devices.
service DeviceService {
    // Create creates the given device.
    rpc Create(CreateDeviceRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            post: "/api/devices"
            body: "*"
        };
    }

    // Get returns the device matching the given DevEUI.
    rpc Get(GetDeviceRequest) returns (GetDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}"
        };
    }

    // List returns the available devices.
    rpc List(ListDeviceRequest) returns (ListDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices"
        };
    }


    // cumulativeAmount 获取给定设备的指定日的日用水量
    rpc DeviceDayConsumption(DeviceDayConsumptionRequest) returns (DeviceDayConsumptionResponse) {
        option(google.api.http) = {
            get: "/api/devices/{dev_eui}/day-consumption"
        };
    }

    // MonthConsumption 获取给定组织指定月的用水量.考虑到未到月尾，月统计表还未生成，故需在天统计表累加
    rpc DeviceMonthConsumption(DeviceMonthConsumptionRequest) returns (DeviceMonthConsumptionResponse) {
        option(google.api.http) = {
            get: "/api/devices/{dev_eui}/month-consumption"
        };
    }

    // cumulativeAmount 获取给定组织指定年份的用水量.理由同上。不过需要先获取当前月份之前的月份的累加，然后在加上剩下的不满月的
    rpc DeviceYearConsumption(DeviceYearConsumptionRequest) returns (DeviceYearConsumptionResponse) {
        option(google.api.http) = {
            get: "/api/devices/{dev_eui}/year-consumption"
        };
    }

    // Delete deletes the device matching the given DevEUI.
    rpc Delete(DeleteDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}"
        };
    }

    // Update updates the device matching the given DevEUI.
    rpc Update(UpdateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{device.dev_eui}"
            body: "*"
        };
    }

    // SetDeviceOrg 设置设备归属组织
    rpc SetDeviceOrg(SetDeviceOrgRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{dev_eui}/organization"
            body: "*"
        };
    }
    // SetDeviceOrg 设置设备归属用户
    rpc SetDeviceUser(SetDeviceUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{dev_eui}/user"
            body: "*"
        };
    }
    // SetDeviceOrg 设置设备归属场景
    rpc SetDeviceScene(SetDeviceSceneRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{dev_eui}/scene"
            body: "*"
        };
    }
    // SetDeviceParent 设置设备归属父节点
    rpc SetDeviceParent(SetDeviceParentRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{dev_eui}/parent"
            body: "*"
        };
    }
    // CreateKeys creates the given device-keys.
    rpc CreateKeys(CreateDeviceKeysRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/devices/{device_keys.dev_eui}/keys"
            body: "*"
        };
    }

    // GetKeys 返回给定 DevEUI 的设备密钥
    rpc GetKeys(GetDeviceKeysRequest) returns (GetDeviceKeysResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/keys"
        };
    }

    // UpdateKeys updates the device-keys.
    rpc UpdateKeys(UpdateDeviceKeysRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{device_keys.dev_eui}/keys"
            body: "*"
        };
    }

    // DeleteKeys deletes the device-keys for the given DevEUI.
    rpc DeleteKeys(DeleteDeviceKeysRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}/keys"
        };
    };

    // Activate (re)activates the device with the given parameters (for ABP or for importing OTAA activations).
    rpc Activate(ActivateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/devices/{device_activation.dev_eui}/activate"
            body: "*"
        };
    }

    // Deactivate de-activates the device.
    rpc Deactivate(DeactivateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}/activation"
        };
    }

    // GetActivation 返回设备的当前激活详细信息 (OTAA and ABP).
    rpc GetActivation(GetDeviceActivationRequest) returns (GetDeviceActivationResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/activation"
        };
    }

    // GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
    rpc GetRandomDevAddr(GetRandomDevAddrRequest) returns (GetRandomDevAddrResponse) {
        option (google.api.http) = {
            post: "/api/devices/{dev_eui}/getRandomDevAddr"
        };
    }

    // GetStats returns the device stats.
    rpc GetStats(GetDeviceStatsRequest) returns (GetDeviceStatsResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/stats"
        };
    }

    // StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.
	//   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
	//   * This endpoint does not work from a web-browser.
    rpc StreamFrameLogs(StreamDeviceFrameLogsRequest) returns (stream StreamDeviceFrameLogsResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/frames"
        };
    }

    // StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).
	//   * This endpoint is intended for debugging only.
	//   * This endpoint does not work from a web-browser.
    rpc StreamEventLogs(StreamDeviceEventLogsRequest) returns (stream StreamDeviceEventLogsResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/events"
        };
    }

    // ClearDeviceNonces deletes the device older activation records for the given DevEUI.
    //   * These are clear older DevNonce records from device activation records in Network Server
    //   * These clears all DevNonce records but keeps latest 20 records for maintain device activation status
    rpc ClearDeviceNonces(ClearDeviceNoncesRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}/devnonce"
        };
    }
    

    // GetLastRxInfo returns the LastRxInfo for the given DevEUI.
    rpc GetLastRxInfo(GetDeviceLastRxInfoRequest) returns (GetDeviceLastRxInfoResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/lastrxinfo"
        };
    }

    // ListLastRxByApplicationID lists the devices by the given application ID, sorted by the name of the device.
    rpc ListLastRxByApplicationID(ListDeviceLastRxRequest) returns (ListLastRxResponse) {
        option (google.api.http) = {
            get: "/api/applications/{application_id}/lastrxinfo"
        };
    }

    //CreateSKeys Sesion key creat the device (for LoRaWAN MAC version  1.0).
    rpc CreateSKeys(SesionKeyRequest) returns (SesionKeyResponse) {
        option (google.api.http) = {
            post: "/api/devices/{dev_eui}/sesionkey"
            body: "*"
        };
    }

    // GetReginDevices returns 区域内所有设备列表
    rpc GetReginDevices(GetReginDevicesRequest) returns (GetReginDevicesResponse) {
        option(google.api.http) = {
            get: "/api/devicesRegion/devices"
        };
    }

    // DeviceReportData returns 根据设备eui获取设备上报明细、日用量、月用量、年用量、累计用量
    rpc DeviceReportData(DeviceReportDataDevicesRequest) returns (DeviceReportDataDevicesResponse) {
        option(google.api.http) = {
            get: "/api/devices/{dev_eui}/reportData"
        };
    }
}

message Device {
     // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
    // Name of the device (if left blank, it will be set to the DevEUI).
    string name = 2;
    // ID of the application to which the device must be added.
    // It is possible to move a device to a different application on update,
    // given that both the old and the new application share the same
    // service-profile.
    int64 application_id = 3 [json_name = "applicationID"];
    // Description of the device.
    string description = 4;
    // DeviceProfileID attached to the device.
    string device_profile_id = 5 [json_name = "deviceProfileID"];

    int64 organization_id    =6;
    int64 user_id            = 7;
    int32 scene             = 8;
    int64 parent             = 9;
    int32 status             = 10;
    string author            = 11;
    string remark             = 12;
    int64 id             = 13;


    // Variables (user defined).
    // These variables can be used together with integrations to store tokens /
    // secrets that must be configured per device. These variables are not
    // exposed in the event payloads.
    map<string, string> variables = 14;

    // Tags (user defined).
    // These tags are exposed in the event payloads or to integration. Tags are
    // intended for aggregation and filtering.
    map<string, string> tags = 15;
    // Skip frame-counter checks (this is insecure, but could be helpful for debugging).
    bool skip_f_cnt_check = 16;
    // Reference altitude.
    // When using geolocation, this altitude will be used as a reference
    // (when supported by the geolocation-server) to increase geolocation
    // accuracy.
    double reference_altitude = 17;

    // Device is disabled.
    bool is_disabled = 18;

    int32 fault = 19;//故障标志：0 正常  1 阀门故障，包括到位开关故障、控阀时电压过低或阀门本身不转，或者疏通阀门出现异常
    int32 dev_exception = 20;//串口异常：0 正常  1 标示串口异常（两次抄读未返回数据）
    int32 magnetic = 21;//磁攻击标志：0 正常 ; 1 有磁攻击。(有磁铁靠近)
    int32 dev_power = 22;//掉电标志：0 电池正常; 1 电池已经去除或低电压
    int32 der = 23;//DER状态：0:当前计量数据正确; 1:当前计量数据错误（抄读返回的值为非 BCD 码)
    int32 valves = 24;//阀门状态：0:阀门开 ; 1:阀门关
}

message DeviceListItem {
    int64 id = 1;
    // Device EUI (HEX encoded).
    string dev_eui = 2 [json_name = "devEUI"];

    // Name of the device.
    string name = 3;

    // Application ID.
    int64 application_id = 4 [json_name = "applicationID"];

    // Description of the device.
    string description = 5;

    // Device-profile ID attached to the device.
    string device_profile_id = 6 [json_name = "deviceProfileID"];

    // Device-profile name.
    string device_profile_name = 7;

    // The device battery status (deprecated, use device_status_battery_level).
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    // 256:    The device-status is not available.
    uint32 device_status_battery = 8;

    // The device margin status
    // -32..32: The demodulation SNR ration in dB
    // 256:     The device-status is not available.
    int32  device_status_margin = 9;

    // Device is connected to an external power source.
    bool device_status_external_power_source = 10;

    // Device battery status is unavailable.
    bool device_status_battery_level_unavailable = 11;

    // Device battery level as a percentage.
    float device_status_battery_level = 12;

    // The last time the application-server received any data from the device,
    // or an empty string when the device never sent any data.
    google.protobuf.Timestamp last_seen_at = 13 [json_name = "lastSeenAt"];
    int64 organization_id    =14;
    int64 user_id            = 15;
    int32 scene             = 16;
    int64 parent             = 17;
    int32 status             = 18;
    string author            = 19;
    string remark            = 20;

    int32 dr = 21; //设备数据速率使用
    string dev_addr = 22;
    double   total =23;
    double latitude = 24;
    double longitude = 25;
    double altitude = 26;

    int32 fault = 27;//故障标志：0 正常  1 阀门故障，包括到位开关故障、控阀时电压过低或阀门本身不转，或者疏通阀门出现异常
    int32 dev_exception = 28;//串口异常：0 正常  1 标示串口异常（两次抄读未返回数据）
    int32 magnetic = 29;//磁攻击标志：0 正常 ; 1 有磁攻击。(有磁铁靠近)
    int32 dev_power = 30;//掉电标志：0 电池正常; 1 电池已经去除或低电压
    int32 der = 31;//DER状态：0:当前计量数据正确; 1:当前计量数据错误（抄读返回的值为非 BCD 码)
    int32 valves = 32;//阀门状态：0:阀门开 ; 1:阀门关

}
message ReginDeviceListItem{
    int64 id = 1;
    // Device EUI (HEX encoded).
    string dev_eui = 2 [json_name = "devEUI"];

    // Name of the device.
    string name = 3;

    // Application ID.
    int64 application_id = 4 [json_name = "applicationID"];

    // Description of the device.
    string description = 5;

    // Device-profile ID attached to the device.
    string device_profile_id = 6 [json_name = "deviceProfileID"];

    // Device-profile name.
    string device_profile_name = 7 [json_name = "deviceProfileName"];

    // The device battery status (deprecated, use device_status_battery_level).
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    // 256:    The device-status is not available.
    uint32 device_status_battery = 8 [json_name = "deviceStatusBattery"];

    // The device margin status
    // -32..32: The demodulation SNR ration in dB
    // 256:     The device-status is not available.
    int32  device_status_margin = 9 [json_name = "deviceStatusMargin"];

    // Device is connected to an external power source.
    bool device_status_external_power_source = 10 ;

    // Device battery status is unavailable.
    bool device_status_battery_level_unavailable = 11;

    // Device battery level as a percentage.
    float device_status_battery_level = 12;

    // The last time the application-server received any data from the device,
    // or an empty string when the device never sent any data.
    google.protobuf.Timestamp last_seen_at = 13 [json_name = "lastSeenAt"];
    int64 organization_id    =14 [json_name = "organizationId"];
    int64 user_id            = 15 [json_name = "userId"];
    int32 scene             = 16;
    int64 parent             = 17;
    int32 status             = 18;
    string author            = 19;
    string remark            = 20;

    int32 fault = 42;//故障标志：0 正常  1 阀门故障，包括到位开关故障、控阀时电压过低或阀门本身不转，或者疏通阀门出现异常
    int32 dev_exception = 43;//串口异常：0 正常  1 标示串口异常（两次抄读未返回数据）
    int32 magnetic = 44;//磁攻击标志：0 正常 ; 1 有磁攻击。(有磁铁靠近)
    int32 dev_power = 45;//掉电标志：0 电池正常; 1 电池已经去除或低电压
    int32 der = 46;//DER状态：0:当前计量数据正确; 1:当前计量数据错误（抄读返回的值为非 BCD 码)
    int32 valves = 47;//阀门状态：0:阀门开 ; 1:阀门关

    int32 dr = 21; //设备数据速率使用
    string dev_addr = 22 [json_name = "devAddr"];
    double altitude = 23;
    double   total =24;

    double latitude = 25;
    double longitude = 26;
    int32 province_id = 27 [json_name = "provinceId"];
    int32 city_id = 28 [json_name = "cityId"];
    int32 area_id = 29 [json_name = "areaId"];

    string locateAddress = 30;
    string username = 31;
    string email = 32;
    string note = 33;
    bool is_auditing = 34 [json_name = "isAuditing"];
    string realName = 35;
    string company_name = 36 [json_name = "companyName"];
    string roles = 37;
    int64 user_organization_id = 38 [json_name = "userOrganizationId"];
    string phone = 39;
    int32  type = 40;
    int32 user_status = 41 [json_name = "userStatus"];
}

message DeviceKeys {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];

    // Network root key (HEX encoded).
    // Note: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!
    string nwk_key = 2;

    // Application root key (HEX encoded).
    // Note: This field only needs to be set for LoRaWAN 1.1.x devices!
    string app_key = 3;

    // Gen application key (HEX encoded).
    // This is an optional key that only must be set for LORaWAN 1.0.x devices
    // that implement the remote multicast setup specification.
    string gen_app_key = 4;
}

message CreateDeviceRequest {
    // Device object to create.
    Device device = 1;
}

message GetDeviceRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceResponse {
    // Device object.
    Device device = 1;

    // Created at 2
    // Updated at 3
    // First seen at 4

    // Last seen timestamp.
    google.protobuf.Timestamp last_seen_at = 5 [json_name = "lastSeenAt"];

    // The device battery status
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    // 256:    The device-status is not available.
    uint32 device_status_battery = 6;

    // The device margin status
    // -32..32: The demodulation SNR ration in dB
    // 256:     The device-status is not available.
    int32  device_status_margin = 20;

    // Device location.
    // This will set when the network-server was able to resolve the location
    // using the geolocation-server.
    common.Location location = 21;
}

message ListDeviceRequest {
    // Max number of devices to return in the result-set.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    int64 organization_id    =3;
    int32 scene             = 4;
    int64 parent             = 5;
    int32 status = 6;//0:未激活，1已激活


    // Application ID to filter on.
    int64 application_id = 7 [json_name = "applicationID"];

    // Search on name or DevEUI.
    string search = 8;

    // Multicast-group ID to filter on (string formatted UUID).
    string multicast_group_id = 9 [json_name = "multicastGroupID"];

    // Service-profile ID to filter on (string formatted UUID).
    string service_profile_id = 10 [json_name = "serviceProfileID"];
    map<string, string> tags = 11;



    
}

message ListDeviceResponse {
    // Total number of devices available within the result-set.
    int64 total_count = 1;

    // Devices within this result-set.
    repeated DeviceListItem result = 2;
}

message DeviceDayConsumptionRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];

    int32 year = 2;
    int32 month = 3;
    int32 day = 4;
}
message DeviceDayConsumptionResponse {
    // Total number of test.
    double total_amount = 1;
}
message DeviceMonthConsumptionRequest {

    string dev_eui = 1 [json_name = "devEUI"];
    // Total number of test.
    int32 year = 2;
    int32 month = 3;
}
message DeviceMonthConsumptionResponse {
    // Total number of test.
    double total_amount = 1;
}

message DeviceYearConsumptionRequest {
    // Total number of test.
    string dev_eui = 1 [json_name = "devEUI"];
    int32 year = 2;
}
message DeviceYearConsumptionResponse {
    // Total number of test.
    double total_amount = 1;
}

message DeleteDeviceRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}


message UpdateDeviceRequest {
    // Device object to update.
    Device device = 1;
}
message SetDeviceOrgRequest {
//    int64 id        =1;
    string dev_eui = 1 [json_name = "devEUI"];
    int64 organization_id        =2;
}
message SetDeviceUserRequest {
//    int64 id        =1;
    string dev_eui = 1 [json_name = "devEUI"];
    int64 user_id        =2;
}
message SetDeviceSceneRequest {
//    int64 id        =1;
    string dev_eui = 1 [json_name = "devEUI"];
    int32 scene        =2;
}
message SetDeviceParentRequest {
//    int64 id        =1;
    string dev_eui = 1 [json_name = "devEUI"];
    int64 parent        =2[json_name = "parentDeviceId"];
}

message CreateDeviceKeysRequest {
    // Device-keys object to create.
    DeviceKeys device_keys = 1;
}

message GetDeviceKeysRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceKeysResponse {
    // Device-key object.
    DeviceKeys device_keys = 1;
}

message UpdateDeviceKeysRequest {
    // Device-keys object to update.
    DeviceKeys device_keys = 1;
}

message DeleteDeviceKeysRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message DeviceActivation {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];

    // Device address (HEX encoded).
    string dev_addr = 2;

    // Application session key (HEX encoded).
    string app_s_key = 3;

    // Network session encryption key (HEX encoded).
    string nwk_s_enc_key = 4;

    // Serving network session integrity key (HEX encoded).
    string s_nwk_s_int_key = 8;

    // Forwarding network session integrity key (HEX encoded).
    string f_nwk_s_int_key = 9;

    // Uplink frame-counter.
    uint32 f_cnt_up = 5;

    // Downlink network frame-counter.
    uint32 n_f_cnt_down = 6;

    // Downlink application frame-counter.
    uint32 a_f_cnt_down = 10;
}

message ActivateDeviceRequest {
    DeviceActivation device_activation = 1;
}

message DeactivateDeviceRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceActivationRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceActivationResponse {
    // Device-activation object.
    DeviceActivation device_activation = 1;
}

message GetRandomDevAddrRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetRandomDevAddrResponse {
    // Device address (HEX encoded).
    string dev_addr = 1;
}

message DeviceStats {
    // Timestamp of the (aggregated) measurement.
    google.protobuf.Timestamp timestamp = 1;

    // Packets received from the device.
    uint32 rx_packets = 2;

    // Average RSSI (as reported by the gateway(s)).
    float gw_rssi = 3;

    // Average SNR (as reported by the gateway(s)).
    float gw_snr = 4;

    // Packets received by frequency.
    map<uint32, uint32> rx_packets_per_frequency = 5;

    // Packets received by DR.
    map<uint32, uint32> rx_packets_per_dr = 6;

    // Error count.
    map<string, uint32> errors = 7;
}

message GetDeviceStatsRequest {
    // DevEUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];

    // Aggregation interval.  One of "second", "minute", "hour", "day", "week",
    // "month", "quarter", "year".  Case insensitive.
    string interval = 2;

    // Timestamp to start from.
    google.protobuf.Timestamp start_timestamp = 3;

    // Timestamp until to get from.
    google.protobuf.Timestamp end_timestamp = 4;
}

message GetDeviceStatsResponse {
    repeated DeviceStats result = 1;
}

message StreamDeviceFrameLogsRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message StreamDeviceFrameLogsResponse {
    oneof frame {
        // Contains an uplink frame.
        UplinkFrameLog uplink_frame = 1;

        // Contains a downlink frame.
        DownlinkFrameLog downlink_frame = 2;
    }
}

message StreamDeviceEventLogsRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message StreamDeviceEventLogsResponse {
    // The event type.
    string type = 1;

    // The event payload in JSON encoding.
    string payload_json = 2 [json_name = "payloadJSON"];

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 3;

    // Stream ID.
    string stream_id = 4 [json_name = "streamID"];
}

message ClearDeviceNoncesRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceLastRxInfoRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceLastRxInfoResponse {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];

    //receiving One of the best the last uplink message.
    ns.DeviceGatewayRXInfo LastRx = 2;

    // rx2 frequency by MAC.
    uint32 rx2Frequency = 3;
}

message ListDeviceLastRxRequest {
    // Max number of devices to return in the result-set.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    // Application ID to filter on.
    int64 application_id = 3 [json_name = "applicationID"];

    // Search on name or DevEUI.
    string search = 4;

    // Multicast-group ID to filter on (string formatted UUID).
    string multicast_group_id = 5 [json_name = "multicastGroupID"];

    // Service-profile ID to filter on (string formatted UUID).
    string service_profile_id = 6 [json_name = "serviceProfileID"];

    // Tags to filter on.
    map<string, string> tags = 7;
}

message ListLastRxResponse {
    // Total number of devices available within the result-set.
    int64 totalCount = 1;

    // Devices LastRxInfo within this result-set.
    repeated GetDeviceLastRxInfoResponse result = 2;
}

message SesionKeyRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];

    // For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!
    string nwkKey = 2;

    // Hex encoded netID.
    string netID = 4;

    //  JoinNonce represents the join-nonce，Note that the max value is 2^24 - 1 = 16777215.
    uint32 joinNonce = 5;

    // Hex encoded devNonce.
    uint32 devNonce = 6;
}

message SesionKeyResponse {
    // Application session key (HEX encoded).
    string appSKey = 1;

    // Forwarding network session integrity key (HEX encoded).
    string fNwkSIntKey = 2;

    // Serving network session integrity key (HEX encoded).
    string sNwkSIntKey = 3;

    // Network session encryption key (HEX encoded).
    string nwkSEncKey = 4;
}

message GetReginDevicesRequest {
    int32 province_id = 1 ;
    int32 city_id = 2 ;
    int32 area_id = 3 ;

    int64 limit = 4;
    // Offset offset of the result-set (for pagination).
    int64 offset = 5;
}

message GetReginDevicesResponse {
    int64 total_count = 1;

    // Devices within this result-set.
    repeated ReginDeviceListItem result = 2;
}

message DeviceReportDataDevicesRequest {
    string dev_eui = 1 [json_name = "devEUI"];
}

message DeviceReportDataDevicesResponse {
//    上报时间
    string reportTime = 1;
    double vol = 2;//电池电量
    double increment = 3;//幅度变化
    double cumulativeAmount = 4;//累计生产量

    double dayAmount = 5;
    double monthAmount = 6;
    double yearAmount = 7;
}
